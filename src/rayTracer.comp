#version 460 core

#extension GL_NV_gpu_shader5 : enable

layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D viewport;
layout(std430, binding = 0) buffer DataBuffer {
	bool voxels[];
};
layout(std430, binding = 1) buffer VoxelDataStorage {
	uint64_t header;
	uint8_t voxelData[];
};

uniform vec3 cameraPosition;
uniform vec3 cameraDirection;
uniform float cameraFov;

struct RayCastHit {
	vec3 point;
	float distance;
	vec3 normal;
};

bool rayIntersectsCube(vec3 rayOrigin, vec3 rayDirection, vec3 cubePosition,  float cubeSize, out RayCastHit entryHit, out RayCastHit exitHit) {
	vec3 minBound = cubePosition;
    vec3 maxBound = cubePosition + vec3(cubeSize);

    vec3 tMin = (minBound - rayOrigin) / rayDirection;
    vec3 tMax = (maxBound - rayOrigin) / rayDirection;

    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);

    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar = min(min(t2.x, t2.y), t2.z);

    if (tNear <= 0.0 || tNear >= tFar)
		return false;
		
	const float epsilon1 = 1e-5;
	const float epsilon2 = 1e-6;

	entryHit.point = clamp(rayOrigin + tNear * rayDirection, minBound, maxBound - epsilon2);
	entryHit.distance = length(abs(entryHit.point - rayOrigin));

	if (abs(entryHit.point.x - minBound.x) < epsilon1)
		entryHit.normal = vec3(-1.0, 0.0, 0.0);
	else if (abs(entryHit.point.x - maxBound.x) < epsilon1)
		entryHit.normal = vec3(1.0, 0.0, 0.0);
	else if (abs(entryHit.point.y - minBound.y) < epsilon1)
		entryHit.normal = vec3(0.0, -1.0, 0.0);
	else if (abs(entryHit.point.y - maxBound.y) < epsilon1)
		entryHit.normal = vec3(0.0, 1.0, 0.0);
	else if (abs(entryHit.point.z - minBound.z) < epsilon1)
		entryHit.normal = vec3(0.0, 0.0, -1.0);
	else if (abs(entryHit.point.z - maxBound.z) < epsilon1)
		entryHit.normal = vec3(0.0, 0.0, 1.0);

	exitHit.point = clamp(rayOrigin + tFar * rayDirection, minBound, maxBound - epsilon2);

	// exitHit distance and normal will never be needed
	// no need to calculate them

	return true;
}

uint compact1By2(uint x) {
	x &= 0x24;
    x = (x ^ (x >> 2)) & 41;
    x = (x ^ (x >> 4)) & 3;
    return x;
}

uvec3 mortonToVec3(uint mortonCode) {
    return uvec3(
        compact1By2(mortonCode),
        compact1By2(mortonCode << 1),
        compact1By2(mortonCode << 2)
    );
}

uint part1By2(uint x) {
	x = (x | (x << 4)) & 35;
	x = (x | (x << 2)) & 36;
	return x;
}

uint vec3ToMorton(uvec3 v) {
	return part1By2(v.x) | part1By2(v.y) >> 1 | part1By2(v.z) >> 2;
}

uint bitCount64(uint64_t value) {
    uint lowBits = uint(value & 0xFFFFFFFFu);
    uint highBits = uint(value >> 32u);
    return bitCount(lowBits) + bitCount(highBits);
}

void main() {
    vec4 color = vec4(0, 0, 0, 1.0);
	vec4[3] colors = vec4[3](
		vec4(1, 0, 0, 1),
		vec4(0, 1, 0, 1),
		vec4(0, 0, 1, 1)
	);

	ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);

	ivec2 viewportSize = imageSize(viewport);
	float aspectRatio = float(viewportSize.x) / float(viewportSize.y);

	vec3 worldUp = vec3(0, 1, 0);

	vec3 nCameraDirection = normalize(cameraDirection);
	vec3 cameraRight = normalize(cross(nCameraDirection, worldUp));
	vec3 cameraUp = normalize(cross(cameraRight, nCameraDirection));

	float fov = radians(cameraFov);
	float nearPlaneDist = tan(fov / 2) * 2;

	vec3 nearPlaneCenter = cameraPosition + (nCameraDirection * nearPlaneDist);
	vec3 rayOrigin = nearPlaneCenter
		+ cameraRight * (float(pixelCoord.x * 2 - viewportSize.x) / viewportSize.x) * aspectRatio
		- cameraUp * -(float(pixelCoord.y * 2 - viewportSize.y) / viewportSize.y);
	vec3 rayDirection = normalize(rayOrigin - cameraPosition);

	RayCastHit brickRayEntryHit;
	RayCastHit brickRayExitHit;
	
	bool hit = false;
	vec3 hitNormal;

	if (rayIntersectsCube(rayOrigin, rayDirection, vec3(0), 4, brickRayEntryHit, brickRayExitHit)) {
		uvec3 currentVoxel = uvec3(floor(brickRayEntryHit.point));
		uvec3 endVoxel = uvec3(floor(brickRayExitHit.point));

		vec3 rayThroughBrick = brickRayExitHit.point - brickRayEntryHit.point;
		vec3 rayThroughBrickDirection = normalize(rayThroughBrick);

		ivec3 steps = ivec3(sign(rayThroughBrick));
		vec3 nextVoxelBoundary = vec3(
			currentVoxel.x + (steps.x > 0 ? steps.x : 0),
			currentVoxel.y + (steps.y > 0 ? steps.y : 0),
			currentVoxel.z + (steps.z > 0 ? steps.z : 0)
		);

		vec3 tMax = vec3(
			rayThroughBrickDirection.x != 0.0 ? (nextVoxelBoundary.x - brickRayEntryHit.point.x) / rayThroughBrickDirection.x : 1.0 / 0,
			rayThroughBrickDirection.y != 0.0 ? (nextVoxelBoundary.y - brickRayEntryHit.point.y) / rayThroughBrickDirection.y : 1.0 / 0,
			rayThroughBrickDirection.z != 0.0 ? (nextVoxelBoundary.z - brickRayEntryHit.point.z) / rayThroughBrickDirection.z : 1.0 / 0
		);

		vec3 tDelta = vec3(
			rayThroughBrickDirection.x != 0.0 ? abs(1.0 / rayThroughBrickDirection.x) : 1.0 / 0,
			rayThroughBrickDirection.y != 0.0 ? abs(1.0 / rayThroughBrickDirection.y) : 1.0 / 0,
			rayThroughBrickDirection.z != 0.0 ? abs(1.0 / rayThroughBrickDirection.z) : 1.0 / 0
		);

		uint ii = 0;
		while (ii < 10) {
			
			ii+= 1;

			uint morton = vec3ToMorton(currentVoxel);
			bool hasVoxel = bool((header >> morton) & 1);
			
			if (hasVoxel) {
				uint64_t mask = morton  == 63 ? 18446744073709551615UL : (1UL << (morton + 1)) - 1;
				uint bitCount = bitCount64(header & mask);
				uint dataIndex = max(0, bitCount - 1);
				uint8_t data = voxelData[dataIndex];
				color = colors[data];

				// TODO: if alpha, keep going and add color
				hit = true;

				// TODO: can use current vars instead of calling function?
				rayIntersectsCube(rayOrigin, rayDirection, currentVoxel, 1, brickRayEntryHit, brickRayExitHit);
				hitNormal = brickRayEntryHit.normal;

				break;
			}

			// TODO: try to use condition in while
			if (currentVoxel == endVoxel)
				break;

			float minTMax = min(min(tMax.x, tMax.y), tMax.z);

			if (tMax.x == minTMax) {
				currentVoxel.x = currentVoxel.x + steps.x;
				tMax.x += tDelta.x;
			}
			if (tMax.y == minTMax) {
				currentVoxel.y = currentVoxel.y+ steps.y;
				tMax.y += tDelta.y;
			}
			if (tMax.z == minTMax) {
				currentVoxel.z = currentVoxel.z + steps.z;
				tMax.z += tDelta.z;
			}
		}
	}

	if (hit) {
		// lighting
		// https://math.hws.edu/graphicsbook/c7/s2.html

		vec4 lightColor = vec4(vec3(1), 1); // r g b intensity
		vec3 invLightDirection = normalize(vec3(-1, 1.5, 0.4));
		float specularIntensity = 0.3;
		float specularExponent = 5;

		float dotln = dot(invLightDirection, hitNormal);
		if (dotln <= 0)
			color = vec4(vec3(0), 1);
		else {
			// diffusion
			color.rgb = (color * lightColor * dotln).rgb * lightColor.a;

			// specular
			vec3 lightReflectionDirection = reflect(invLightDirection * -1, hitNormal);
			float i = dot(lightReflectionDirection, rayDirection * -1);
			if (i > 0)
				color.rgb += specularIntensity * pow(i, specularExponent) * lightColor.rgb;
		}
	}
	
	imageStore(viewport, pixelCoord, color);
}